-- 1번 : 조인(외부조인, 교차조인, 셀프조인)

-- 테이블 생성
CREATE TABLE TBL_STUDENT (
	STU_SID NUMBER,
	STU_NAME VARCHAR2(20),
	STU_MAJOR VARCHAR2(30),
	CONSTRAINT PK_STUDNET PRIMARY KEY(STU_SID)
);

SELECT * FROM TBL_STUDENT;

-- 데이터 삽입
INSERT INTO TBL_STUDENT VALUES(1, '홍길동', '컴퓨터공학');
INSERT INTO TBL_STUDENT VALUES(2, '김영희', '컴퓨터공학');
INSERT INTO TBL_STUDENT VALUES(3, '이철수', '정보보안학');
INSERT INTO TBL_STUDENT VALUES(4, '신호동', '정보보안학');
INSERT INTO TBL_STUDENT VALUES(5, '신짱구', '정보보안학');

SELECT * FROM TBL_STUDENT;

-- 테이블 생성
CREATE TABLE TBL_ENROLL(
	ENR_SID NUMBER,	--학생ID
	ENR_CID NUMBER,	--과목ID
	ENR_GRADE CHAR(2), --학점
	CONSTRAINT PK_ENROLL PRIMARY KEY(ENR_SID, ENR_CID),
	CONSTRAINT FK_ENROLL FOREIGN KEY(ENR_SID) REFERENCES TBL_STUDENT(STU_SID) 
	ON DELETE CASCADE
	-- ON DELETE CASCADE 옵션은 부모테이블의 행이 삭제될경우 자식 테이블의 관련된 행도 자동 삭제된다
);

-- 데이터 삽입
INSERT INTO TBL_ENROLL VALUES(1, 101, 'A');
INSERT INTO TBL_ENROLL VALUES(2, 102, 'B');
INSERT INTO TBL_ENROLL VALUES(3, 101, 'C');
INSERT INTO TBL_ENROLL VALUES(4, 102, 'A');
INSERT INTO TBL_ENROLL VALUES(4, 101, 'B');
SELECT * FROM TBL_ENROLL;

-- 1) 외부조인(OUTER JOIN)
-- LEFT OUTER JOIN
-- 모든 학생 정보 기준으로 수강 정보가 있는 경우 함께 출력하고 없는 경우 NULL출력
SELECT STU_SID, STU_NAME, STU_MAJOR, ENR_CID, ENR_GRADE
FROM TBL_STUDENT S LEFT OUTER JOIN TBL_ENROLL E
ON S.STU_SID = E.ENR_SID;

-- RIGHT OUTER JOIN
-- 수강 정보 기준으로 수강한 학생이 없는 경우에도 학생 정보는 NULL로 표시
SELECT * FROM TBL_ENROLL;
SELECT * FROM TBL_STUDENT;

INSERT INTO TBL_ENROLL
VALUES (6, 103, NULL);

SELECT * FROM TBL_BOOKS;
CREATE TABLE TBL_BP (
	BP_ID NUMBER,
	BP_PRICE NUMBER,
	CONSTRAINT PK_BP PRIMARY KEY(BP_ID)
);
SELECT * FROM TBL_BP;

INSERT INTO TBL_BP
--VALUES(1, 15000);
--VALUES(2, 23000);
VALUES(10, 45000);

SELECT BOOK_ID, BOOK_TITLE, BOOK_AUTHOR, BP_ID, BP_PRICE
FROM TBL_BOOKS RIGHT JOIN TBL_BP
ON BOOK_ID = BP_ID;

-- FULL OUTER JOIN

SELECT BOOK_ID, BOOK_TITLE, BOOK_AUTHOR, BP_ID, BP_PRICE
FROM TBL_BOOKS FULL JOIN TBL_BP 
ON BOOK_ID = BP_ID;

-- 2) 교차조인(CROSS JOIN)
SELECT BOOK_ID, BOOK_TITLE, BOOK_AUTHOR, BP_ID, BP_PRICE
FROM TBL_BOOKS CROSS JOIN TBL_BP;

-- 3) 셀프조인(SELF JOIN)
-- 직원과 그 매니저의 이름을 함께 출력
SELECT E.EMPLOYEE_ID 직원ID, E.FIRST_NAME 직원이름, M.EMPLOYEE_ID 매니저ID, M.FIRST_NAME 매니저이름
FROM EMPLOYEES E LEFT JOIN EMPLOYEES M
ON M.EMPLOYEE_ID =  E.MANAGER_ID
ORDER BY E.EMPLOYEE_ID;

-- 부하가 없는 직원 찾기
SELECT E.EMPLOYEE_ID, E.FIRST_NAME
FROM EMPLOYEES E LEFT JOIN EMPLOYEES M
ON M.MANAGER_ID = E.EMPLOYEE_ID
WHERE M.EMPLOYEE_ID IS NULL;




